core.models.base
================

.. py:module:: core.models.base

.. autoapi-nested-parse::

   Copyright (c) Meta Platforms, Inc. and affiliates.

   This source code is licensed under the MIT license found in the
   LICENSE file in the root directory of this source tree.



Classes
-------

.. autoapisummary::

   core.models.base.HeadInterface
   core.models.base.BackboneInterface
   core.models.base.HydraModel
   core.models.base.HydraModelV2


Module Contents
---------------

.. py:class:: HeadInterface

   .. py:property:: use_amp


   .. py:method:: forward(data: fairchem.core.datasets.atomic_data.AtomicData, emb: dict[str, torch.Tensor]) -> dict[str, torch.Tensor]
      :abstractmethod:


      Head forward.

      :param data: Atomic systems as input
      :type data: AtomicData
      :param emb: Embeddings of the input as generated by the backbone
      :type emb: dict[str->torch.Tensor]

      :returns: **outputs** -- Return one or more targets generated by this head
      :rtype: dict[str->torch.Tensor]



.. py:class:: BackboneInterface

   .. py:method:: forward(data: fairchem.core.datasets.atomic_data.AtomicData) -> dict[str, torch.Tensor]
      :abstractmethod:


      Backbone forward.

      :param data: Atomic systems as input
      :type data: AtomicData

      :returns: **embedding** -- Return backbone embeddings for the given input
      :rtype: dict[str->torch.Tensor]



.. py:class:: HydraModel(backbone: dict | None = None, heads: dict | None = None, finetune_config: dict | None = None, otf_graph: bool = True, pass_through_head_outputs: bool = False, freeze_backbone: bool = False)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F


       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: device
      :value: None



   .. py:attribute:: otf_graph


   .. py:attribute:: pass_through_head_outputs


   .. py:method:: forward(data: fairchem.core.datasets.atomic_data.AtomicData)


.. py:class:: HydraModelV2(backbone: BackboneInterface, heads: dict[str, HeadInterface], freeze_backbone: bool = False)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F


       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: backbone


   .. py:attribute:: output_heads


   .. py:attribute:: device
      :value: None



   .. py:method:: forward(data)


