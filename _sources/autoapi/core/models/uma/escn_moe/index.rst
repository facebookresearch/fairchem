core.models.uma.escn_moe
========================

.. py:module:: core.models.uma.escn_moe

.. autoapi-nested-parse::

   Copyright (c) Meta Platforms, Inc. and affiliates.

   This source code is licensed under the MIT license found in the
   LICENSE file in the root directory of this source tree.



Classes
-------

.. autoapisummary::

   core.models.uma.escn_moe.eSCNMDMoeBackbone
   core.models.uma.escn_moe.DatasetSpecificMoEWrapper
   core.models.uma.escn_moe.DatasetSpecificSingleHeadWrapper


Module Contents
---------------

.. py:class:: eSCNMDMoeBackbone(num_experts: int = 8, moe_dropout: float = 0.0, use_global_embedding: bool = False, use_composition_embedding: bool = False, moe_expert_coefficient_norm: str = 'softmax', act=torch.nn.SiLU, layers_moe=None, moe_layer_type: str = 'pytorch', moe_single: bool = False, moe_type: str = 'so2', model_version: float = 1.0, **kwargs)

   Bases: :py:obj:`fairchem.core.models.uma.escn_md.eSCNMDBackbone`, :py:obj:`fairchem.core.models.uma.nn.mole_utils.MOLEInterface`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F


       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: parent_kwargs


   .. py:attribute:: num_experts


   .. py:attribute:: model_version


   .. py:method:: merge_MOLE_model(data)


   .. py:method:: set_MOLE_coefficients(atomic_numbers_full, batch_full, csd_mixed_emb)


   .. py:method:: set_MOLE_sizes(nsystems, batch_full, edge_index)


   .. py:method:: log_MOLE_stats()


.. py:class:: DatasetSpecificMoEWrapper(backbone, dataset_names, head_cls, wrap_property=True, head_kwargs=None)

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`fairchem.core.models.base.HeadInterface`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F


       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: regress_stress


   .. py:attribute:: regress_forces


   .. py:attribute:: wrap_property


   .. py:attribute:: dataset_names


   .. py:attribute:: dataset_name_to_exp


   .. py:attribute:: head


   .. py:attribute:: global_mole_tensors


   .. py:method:: forward(data, emb: dict[str, torch.Tensor]) -> dict[str, torch.Tensor]

      Head forward.

      :param data: Atomic systems as input
      :type data: AtomicData
      :param emb: Embeddings of the input as generated by the backbone
      :type emb: dict[str->torch.Tensor]

      :returns: **outputs** -- Return one or more targets generated by this head
      :rtype: dict[str->torch.Tensor]



.. py:class:: DatasetSpecificSingleHeadWrapper(backbone, dataset_names, head_cls, wrap_property=True, head_kwargs=None)

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`fairchem.core.models.base.HeadInterface`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F


       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: regress_stress


   .. py:attribute:: regress_forces


   .. py:attribute:: wrap_property


   .. py:attribute:: dataset_names


   .. py:attribute:: head


   .. py:method:: forward(data, emb: dict[str, torch.Tensor]) -> dict[str, torch.Tensor]

      Head forward.

      :param data: Atomic systems as input
      :type data: AtomicData
      :param emb: Embeddings of the input as generated by the backbone
      :type emb: dict[str->torch.Tensor]

      :returns: **outputs** -- Return one or more targets generated by this head
      :rtype: dict[str->torch.Tensor]



